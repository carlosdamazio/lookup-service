// Code generated by mockery v2.14.1. DO NOT EDIT.

package v1

import (
	models "github.com/carlosdamazio/lookup-service/internal/models"
	mock "github.com/stretchr/testify/mock"
)

// mockLookupService is an autogenerated mock type for the mockLookupService type
type mockLookupService struct {
	mock.Mock
}

// List provides a mock function with given fields:
func (_m *mockLookupService) List() ([]*models.Query, error) {
	ret := _m.Called()

	var r0 []*models.Query
	if rf, ok := ret.Get(0).(func() []*models.Query); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Query)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Lookup provides a mock function with given fields: domain, clientIP
func (_m *mockLookupService) Lookup(domain string, clientIP string) (*models.Query, error) {
	ret := _m.Called(domain, clientIP)

	var r0 *models.Query
	if rf, ok := ret.Get(0).(func(string, string) *models.Query); ok {
		r0 = rf(domain, clientIP)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Query)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(domain, clientIP)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTnewLookupService interface {
	mock.TestingT
	Cleanup(func())
}

// newLookupService creates a new instance of mockLookupService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func newLookupService(t mockConstructorTestingTnewLookupService) *mockLookupService {
	mock := &mockLookupService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
